#ifndef MY_UTILITY
#define MY_UTILITY

const char* g_dictionary[3][2][3][10]                                // Основной глобальный словарь
{                                                                    // Работа словаря g_dictionary[флаг страницы][флаг абзаца][строка][слово]
    {                                                                                                                                       // [флаг страницы] - используется
        {                                                                                                                                   // в основном для работы исключений
            { "", " один", " два", " три", " четыре", " пять", " шесть", " семь", " восемь", " девять" },
            { "", " десять", " двадцать", " тридцать", " сорок", " пятьдесят", " шестьдесят", " семьдесят", " восемьдесят", " девяносто" }, // [флаг абзаца] - позволяет различать
            { "", " сто", " двести", " триста", " четыреста", " пятьсот", " шестьсот", " семьсот", " восемьсот", " девятьсот" }             // между тысячами и остальными разрядами
        },
        {                                                                                                                                   // [строка][слово] - используются для
            { "", " одна", " две", " три", " четыре", " пять", " шесть", " семь", " восемь", " девять" },                                   // непосредственной работой с введеными числами
            { "", " десять", " двадцать", " тридцать", " сорок", " пятьдесят", " шестьдесят", " семьдесят", " восемьдесят", " девяносто" },
            { "", " сто", " двести", " триста", " четыреста", " пятьсот", " шестьсот", " семьсот", " восемьсот", " девятьсот" }
        }
    },
    {
        {
            { " десять", " одиннадцать", " двенадцать", " тринадцать", " четырнадцать", " пятнадцать", " шестнадцать", " семнадцать", " восемнадцать", " девятнадцать"},
            { "", "", "", "", "", "", "", "", "", "" },
            { "", " сто", " двести", " триста", " четыреста", " пятьсот", " шестьсот", " семьсот", " восемьсот", " девятьсот" },
        },
        {
            { " десять", " одиннадцать", " двенадцать", " тринадцать", " четырнадцать", " пятнадцать", " шестнадцать", " семнадцать", " восемнадцать", " девятнадцать"},
            { "", "", "", "", "", "", "", "", "", "" },
            { "", " сто", " двести", " триста", " четыреста", " пятьсот", " шестьсот", " семьсот", " восемьсот", " девятьсот" },
        }
    },
    {
        {
            {" рублей", " рубль", " рубля", " рубля", " рубля", " рублей", " рублей", " рублей", " рублей", " рублей"},
            {" тысяч", " тысяча", " тысячи", " тысячи", " тысячи", " тысяч", " тысяч", " тысяч", " тысяч", " тысяч"},
            {" миллионов", " миллион", " миллиона", " миллиона", " миллиона", " миллионов", " миллионов", " миллионов", " миллионов", " миллионов"}
        },
        {
            {" рублей", " рубль", " рубля", " рубля", " рубля", " рублей", " рублей", " рублей", " рублей", " рублей"},
            {" тысяч", " тысяч", " тысяч", " тысяч", " тысяч", " тысяч", " тысяч", " тысяч", " тысяч", " тысяч"},
            {" миллионов", " миллионов", " миллионов", " миллионов", " миллионов", " миллионов", " миллионов", " миллионов", " миллионов", " миллионов"}
        }
    }
};

//_______________________________________________________________________________________________________________________________________________________________________
void reverseArray(int* array, int length)                                       // Функция переворачивания массива
{
    for (int i{ 0 }, j{ length - 1 }; i < j; i++, j--)
        std::swap(array[i], array[j]);
}
//_______________________________________________________________________________________________________________________________________________________________________
int* convertCharArrToIntArr(char input[], int& length)                          // Превращение массива символов в указатель на целочисленный массив
{
    bool exit{ false };
    length = 0;

    while (!exit)                                                               // Проверяем на наличие только чисел
    {
        switch (isdigit(input[length]))
        {
        case 0:
            if (input[length] == '\0')
            {
                exit = true;
                break;
            }
            else
            {
                std::cout << "Некоректный ввод.";
                return NULL;
            }
        default:
            length++;
            break;
        }
    }

    int* result_array{ new int[length] };                                       // Создаем указатель

    for (int i{ 0 }; i <= length; i++)                                          // Копируем массив
        result_array[i] = input[i] - '0';

    return result_array;                                                        // Возвращаем указатель
}

#endif