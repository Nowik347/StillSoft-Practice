#include "pch.h"
#include "CppUnitTest.h"
#include "../NumberToTextConverter/NumberToTextConverter.cpp"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace UnitTestA
{
	TEST_CLASS(UnitTestA)
	{
	public:
		
		bool add_rubles{ false };

		TEST_METHOD(TestMethodA)
		{
			std::string expected{ " один" };
			char input_numbers[]{ "1" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodB)
		{
			std::string expected{ " дес€ть" };
			char input_numbers[]{ "10" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodC)
		{
			std::string expected{ " сто" };
			char input_numbers[]{ "100" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodD)
		{
			std::string expected{ " одна тыс€ча" };
			char input_numbers[]{ "1 000" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodE)
		{
			std::string expected{ " дес€ть тыс€ч" };
			char input_numbers[]{ "10 000" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodF)
		{
			std::string expected{ " сто тыс€ч" };
			char input_numbers[]{ "100 000" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodG)
		{
			std::string expected{ " один миллион" };
			char input_numbers[]{ "1 000 000" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodH)
		{
			std::string expected{ " дес€ть миллионов" };
			char input_numbers[]{ "10 000 000" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodI)
		{
			std::string expected{ " сто миллионов" };
			char input_numbers[]{ "100 000 000" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodJ)
		{
			std::string expected{ " сто одиннадцать миллионов сто одиннадцать тыс€ч сто одиннадцать" };
			char input_numbers[]{ "111 111 111" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}
	};

	TEST_CLASS(UnitTestB)
	{
	public:

		bool add_rubles{ true };

		TEST_METHOD(TestMethodA)
		{
			std::string expected{ " один рубль" };
			char input_numbers[]{ "1" };
			
			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodB)
		{
			std::string expected{ " дес€ть рублей" };
			char input_numbers[]{ "10" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodC)
		{
			std::string expected{ " сто рублей" };
			char input_numbers[]{ "100" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodD)
		{
			std::string expected{ " одна тыс€ча рублей" };
			char input_numbers[]{ "1 000" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodE)
		{
			std::string expected{ " дес€ть тыс€ч рублей" };
			char input_numbers[]{ "10 000" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodF)
		{
			std::string expected{ " сто тыс€ч рублей" };
			char input_numbers[]{ "100 000" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodG)
		{
			std::string expected{ " один миллион рублей" };
			char input_numbers[]{ "1 000 000" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodH)
		{
			std::string expected{ " дес€ть миллионов рублей" };
			char input_numbers[]{ "10 000 000" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodI)
		{
			std::string expected{ " сто миллионов рублей" };
			char input_numbers[]{ "100 000 000" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodJ)
		{
			std::string expected{ " сто одиннадцать миллионов сто одиннадцать тыс€ч сто одиннадцать рублей" };
			char input_numbers[]{ "111 111 111" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}
	};

	TEST_CLASS(UnitTestC)
	{
	public:

		bool add_rubles{ false };

		TEST_METHOD(TestMethodA)
		{
			std::string expected{ " четыреста восемьдес€т п€ть миллионов дев€тьсот дев€носто три тыс€чи дев€тьсот семьдес€т два" };
			char input_numbers[]{ "485 993 972" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodB)
		{
			std::string expected{ " семьсот тридцать шесть миллионов четыреста восемьдес€т шесть тыс€ч сто дев€носто три" };
			char input_numbers[]{ "736 486 193" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodC)
		{
			std::string expected{ " семьсот дев€носто миллионов семьсот дев€ть тыс€ч шесть" };
			char input_numbers[]{ "790 709 006" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodD)
		{
			std::string expected{ " триста тридцать три миллиона дев€тьсот семнадцать тыс€ч дев€тьсот шестьдес€т п€ть" };
			char input_numbers[]{ "333 917 965" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodE)
		{
			std::string expected{ " п€тьсот дев€носто миллионов шестьсот п€тьдес€т две тыс€чи семьсот шестьдес€т четыре" };
			char input_numbers[]{ "590 652 764" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodF)
		{
			std::string expected{ " сто двадцать шесть миллионов семьсот восемьдес€т одна тыс€ча четыреста дев€носто два" };
			char input_numbers[]{ "126 781 492" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodG)
		{
			std::string expected{ " семьсот сорок п€ть миллионов двести шестьдес€т п€ть тыс€ч шестьсот шестнадцать" };
			char input_numbers[]{ "745 265 616" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodH)
		{
			std::string expected{ " двести шестнадцать миллионов сто шестьдес€т тыс€ч п€тьсот сорок три" };
			char input_numbers[]{ "216 160 543" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodI)
		{
			std::string expected{ " дев€тьсот дев€носто дев€ть миллионов триста семьдес€т шесть тыс€ч шестьсот дев€носто три" };
			char input_numbers[]{ "999 376 693" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodJ)
		{
			std::string expected{ " дев€тьсот сорок восемь миллионов двести семьдес€т три тыс€чи шестьсот двенадцать" };
			char input_numbers[]{ "948 273 612" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}
	};

	TEST_CLASS(UnitTestD)
	{
	public:

		bool add_rubles{ true };

		TEST_METHOD(TestMethodA)
		{
			std::string expected{ " четыреста восемьдес€т п€ть миллионов дев€тьсот дев€носто три тыс€чи дев€тьсот семьдес€т два рубл€" };
			char input_numbers[]{ "485 993 972" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodB)
		{
			std::string expected{ " семьсот тридцать шесть миллионов четыреста восемьдес€т шесть тыс€ч сто дев€носто три рубл€" };
			char input_numbers[]{ "736 486 193" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodC)
		{
			std::string expected{ " семьсот дев€носто миллионов семьсот дев€ть тыс€ч шесть рублей" };
			char input_numbers[]{ "790 709 006" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodD)
		{
			std::string expected{ " триста тридцать три миллиона дев€тьсот семнадцать тыс€ч дев€тьсот шестьдес€т п€ть рублей" };
			char input_numbers[]{ "333 917 965" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodE)
		{
			std::string expected{ " п€тьсот дев€носто миллионов шестьсот п€тьдес€т две тыс€чи семьсот шестьдес€т четыре рубл€" };
			char input_numbers[]{ "590 652 764" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodF)
		{
			std::string expected{ " сто двадцать шесть миллионов семьсот восемьдес€т одна тыс€ча четыреста дев€носто два рубл€" };
			char input_numbers[]{ "126 781 492" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodG)
		{
			std::string expected{ " семьсот сорок п€ть миллионов двести шестьдес€т п€ть тыс€ч шестьсот шестнадцать рублей" };
			char input_numbers[]{ "745 265 616" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodH)
		{
			std::string expected{ " двести шестнадцать миллионов сто шестьдес€т тыс€ч п€тьсот сорок три рубл€" };
			char input_numbers[]{ "216 160 543" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodI)
		{
			std::string expected{ " дев€тьсот дев€носто дев€ть миллионов триста семьдес€т шесть тыс€ч шестьсот дев€носто три рубл€" };
			char input_numbers[]{ "999 376 693" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}

		TEST_METHOD(TestMethodJ)
		{
			std::string expected{ " дев€тьсот сорок восемь миллионов двести семьдес€т три тыс€чи шестьсот двенадцать рублей" };
			char input_numbers[]{ "948 273 612" };

			// Call main() in your test
			std::string result = numToTextConvert(input_numbers, add_rubles);

			// Test
			Assert::AreEqual(expected, result);
		}
	};
}