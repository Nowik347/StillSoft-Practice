#include "pch.h"
#include "CppUnitTest.h"
#include "../TestingField/Prototype_2.cpp"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace UnitTestA
{
	TEST_CLASS(UnitTestA)
	{
	public:
		
		bool add_rubles{ false };

		const char* answers[4][10]
		{
			{" один", " десять", " сто", " одна тысяча", " десять тысяч", " сто тысяч", " один миллион", " десять миллионов", " сто миллионов",
			" сто одиннадцать миллионов сто одиннадцать тысяч сто одиннадцать"},

			{" один рубль", " десять рублей", " сто рублей", " одна тысяча рублей", " десять тысяч рублей", " сто тысяч рублей", " один миллион рублей", " десять миллионов рублей",
			" сто миллионов рублей", " сто одиннадцать миллионов сто одиннадцать тысяч сто одиннадцать рублей"},

			{" четыреста восемьдесят пять миллионов девятьсот девяносто три тысячи девятьсот семьдесят два", " семьсот тридцать шесть миллионов четыреста восемьдесят шесть тысяч сто девяносто три",
			 " семьсот девяносто миллионов семьсот девять тысяч шесть", " триста тридцать три миллиона девятьсот семнадцать тысяч девятьсот шестьдесят пять",
			 " пятьсот девяносто миллионов шестьсот пятьдесят две тысячи семьсот шестьдесят четыре", " сто двадцать шесть миллионов семьсот восемьдесят одна тысяча четыреста девяносто два",
			 " семьсот сорок пять миллионов двести шестьдесят пять тысяч шестьсот шестнадцать", " двести шестнадцать миллионов сто шестьдесят тысяч пятьсот сорок три",
			 " девятьсот девяносто девять миллионов триста семьдесят шесть тысяч шестьсот девяносто три", " девятьсот сорок восемь миллионов двести семьдесят три тысячи шестьсот двенадцать"},

			{" четыреста восемьдесят пять миллионов девятьсот девяносто три тысячи девятьсот семьдесят два рубля", " семьсот тридцать шесть миллионов четыреста восемьдесят шесть тысяч сто девяносто три рубля",
			 " семьсот девяносто миллионов семьсот девять тысяч шесть рублей", " триста тридцать три миллиона девятьсот семнадцать тысяч девятьсот шестьдесят пять рублей",
			 " пятьсот девяносто миллионов шестьсот пятьдесят две тысячи семьсот шестьдесят четыре рубля", " сто двадцать шесть миллионов семьсот восемьдесят одна тысяча четыреста девяносто два рубля",
			 " семьсот сорок пять миллионов двести шестьдесят пять тысяч шестьсот шестнадцать рублей", " двести шестнадцать миллионов сто шестьдесят тысяч пятьсот сорок три рубля",
			 " девятьсот девяносто девять миллионов триста семьдесят шесть тысяч шестьсот девяносто три рубля", " девятьсот сорок восемь миллионов двести семьдесят три тысячи шестьсот двенадцать рублей"}
		};

		char* inputs[4][10]
		{
			{"1", "10", "100", "1000", "10000", "100000", "1000000", "10000000", "100000000", "111111111"},
			{"1", "10", "100", "1000", "10000", "100000", "1000000", "10000000", "100000000", "111111111"},
			{"485993972", "736486193", "790709006", "333917965", "590652764", "126781492", "745265616", "216160543", "999376693", "948273612"},
			{"485993972", "736486193", "790709006", "333917965", "590652764", "126781492", "745265616", "216160543", "999376693", "948273612"}
		};

		TEST_METHOD(TestMethodA)
		{
			std::string expected{}, result{};
			int* input_numbers{ 0 }; 
			int length{ 0 }, count{ 0 }, final_count{ 40 }, module_count{ 0 };

			for (short i{ 0 }; i < 4; i++)
			{
				switch (i)
				{
				case 0:
					add_rubles = false;
					break;
				case 1:
					add_rubles = true;
					break;
				case 2:
					add_rubles = false;
					break;
				case 3:
					add_rubles = true;
					break;
				}

				module_count = 0;

				for (short j{ 0 }; j < 10; j++)
				{
					expected = answers[i][j];

					input_numbers = convertCharArrToIntArr(inputs[i][j], length);

					result = numToTextConvert(input_numbers, add_rubles, length);

					if (result == expected)
					{
						count++;
						module_count++;

						Logger::WriteMessage(" Test complete ");
					}
					else
					{
						Logger::WriteMessage(" Test failed ");
					}
				}

				if (module_count == 10)
				{
					Logger::WriteMessage(" Module operational \n");
				}
				else
				{
					Logger::WriteMessage(" Module failed \n");
				}
			}

			// Test
			Assert::AreEqual(final_count, count);
		}
	};
}